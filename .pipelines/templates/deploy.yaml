parameters:
- name: serviceConnectionName
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: appServiceNames
  type: object
  default: []

stages:
 - stage: Deploy
   displayName: Deploy

   jobs:
   - job: PreDeploy
     displayName: Pre-Deploy
     variables: 
       infraTemplate: $(Pipeline.Workspace)/infrastructure/main.json
       parameterFile: '@$(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json'
     steps:
     - download: current
       artifact: infrastructure
       displayName: Download Infrastructure
     - download: current
       artifact: functionapp
       displayName: Download Function App
     - script: |
         REGIONS=$(jq -r .parameters.regions.value $(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json)
         BASE_NAME=$(jq -r .parameters.baseName.value $(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json)
         APP_SERVICE_NAMES=$(jq -r --arg baseName "$BASE_NAME" '.parameters.regions.value | map({(.): {baseName: $baseName, region: .}}) | add' $(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json)
         echo $APP_SERVICE_NAMES
         echo "##vso[task.setvariable variable=appServiceNames;isOutput=true]$APP_SERVICE_NAMES"
       displayName: setTargets
     - script: |
         echo $(setTargets.appServiceNames)
       displayName: Print ASNs
     
   - job: Deploy
     dependsOn: PreDeploy
     displayName: Deploy
     strategy:
      matrix: $[ dependencies.PreDeploy.outputs['PreDeploy.setTargets.appServiceNames'] ]
     variables:
      targets: $[ dependencies.PreDeploy.outputs['PreDeploy.setTargets.appServiceNames'] ]
     steps:
     - script: |
        echo $(dependencies.PreDeploy.outputs['PreDeploy.setTargets.appServiceNames'] ])
        echo "Hello from the matrix"
        echo $(targets)
        echo $(baseName)
        echo $(region)
      
    #  - ${{ each appServiceName in variables.appServiceNames }}:
    #   # Deploy function app
    #    - task: AzureCLI@2
    #      displayName: Deploy Function to ${{ appServiceName }}
    #      inputs:
    #        azureSubscription: ${{ parameters.serviceConnectionName }}
    #        scriptType: bash
    #        scriptLocation: inlineScript
    #        inlineScript: |
    #          az functionapp deployment source config-zip -g ${{ parameters.resourceGroupName }} -n ${{ appServiceName }} --src $(Pipeline.Workspace)/functionapp/functionapp.zip
