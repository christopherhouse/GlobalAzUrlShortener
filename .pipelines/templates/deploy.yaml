parameters:
- name: serviceConnectionName
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: appServiceNames
  type: object
  default: []
- name: baseName
  type: string
  default: ''
- name: regions
  type: object
  default: []

stages:
 - stage: Deploy
   displayName: Deploy

   jobs:
   - job: PreDeploy
     displayName: Pre-Deploy
     variables: 
       infraTemplate: $(Pipeline.Workspace)/infrastructure/main.json
       parameterFile: '@$(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json'
     steps:
     - download: current
       artifact: infrastructure
       displayName: Download Infrastructure
     - download: current
       artifact: functionapp
       displayName: Download Function App
     - script: |
        #  REGIONS=$(jq -r .parameters.regions.value $(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json)
        #  BASE_NAME=$(jq -r .parameters.baseName.value $(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json)
        #  APP_SERVICE_NAMES=$(jq -r --arg baseName "$BASE_NAME" '.parameters.regions.value | map({(.): {baseName: $baseName, region: .}}) | add' $(Pipeline.Workspace)/infrastructure/parameters/${{ parameters.environmentName }}/parameters.json)
        #  echo $APP_SERVICE_NAMES
        APP_SERVICE_NAMES="{ 'eastus': { 'baseName': 'cmhurl', 'region': 'eastus' }, 'westus': { 'baseName': 'cmhurl', 'region': 'westus' }, 'westeurope': { 'baseName': 'cmhurl', 'region': 'westeurope' } }"
         echo "##vso[task.setvariable variable=targets;isOutput=true]$APP_SERVICE_NAMES"
       displayName: setTargets
     - script: |
         echo $(setTargets.targets)
       displayName: Print ASNs
     
  #  - job: Deploy
  #    dependsOn: PreDeploy
  #    displayName: Deploy
  #    strategy:
  #     matrix: ${{ parameters.regions }}
  #    steps:
  #    - script: |
  #        echo ${{ parameters.baseName }}
      
     - ${{ each region in parameters.regions }}:
      # Deploy function app
       - task: AzureCLI@2
         displayName: Deploy Function to ${{ region }}
         inputs:
           azureSubscription: ${{ parameters.serviceConnectionName }}
           scriptType: bash
           scriptLocation: inlineScript
           inlineScript: |
             az functionapp deployment source config-zip -g ${{ parameters.resourceGroupName }} -n ${{ parameters.baseName }}-${{ region }}-fa --src $(Pipeline.Workspace)/functionapp/functionapp.zip
